---
- name: Django | Create application user and home.
  user: >
    home={{ project.root }}
    name={{ project.user }}
    groups=www-data
    state=present
  tags:
    - base
    - user
    - provision
    - app

- name: Django | Change permissions
  sudo: true
  shell: chown -R {{ project.user }}:www-data {{ project.root }} -R
  tags:
    - base
    - user
    - provision
    - app

- name: Django | Packages | Install required system packages.
  apt: >
    pkg={{ item }}
    state=installed
    update-cache=yes
  with_items:
    - build-essential
    - python-dev
    - python-setuptools
    - python-psycopg2
    - python-virtualenv
    - python-pip
    - libpq-dev
  tags:
    - base
    - packages
    - provision
    - app

- name: Django | Packages | Install prerequisite user specified packages.
  when: project.packages is defined
  apt: >
    pkg={{ item }}
    state=installed
    update-cache=yes
  with_items: project.packages
  tags:
    - base
    - packages
    - provision
    - app

- name: Django | Synchronize code from repository
  sudo: yes
  sudo_user: "{{ project.user }}"
  synchronize: >
    src={{ projectsrc }}
    dest={{ project.root }}
    rsync_opts="{{ rsync.args }}"
    rsync_timeout=360
    mode=push
    checksum=yes
    delete=yes
    group=no
    times=no
    set_remote_user=no
  tags:
    - pip
    - app
    - code
    - debug
  notify:
    - restart celery workers
    - restart uwsgi
  retries: 5

- name: Django | Create virtualenv directory
  file: >
    state=directory
    path={{ project.virtualenv }}
    owner={{ project.user }}
    group=www-data
  tags:
    - base
    - user
    - provision
    - app

- name: Django | Pip | Upgrade pip + setuptools
  sudo_user: "{{ project.user }}"
  pip: >
    name={{ item }}
    virtualenv_site_packages={{ project.virtualenv_site_packages }}
    virtualenv={{ project.virtualenv }}
    extra_args=''
    state=latest
    use_mirrors=no
  with_items:
    - setuptools==7.0
    - pip==1.5.6
  tags:
    - packages
    - application
    - pip
    - app
  retries: 2

- name: Django | Pip | Install Requirements.
  sudo_user: "{{ project.user }}"
  pip: >
    requirements={{ item }}
    virtualenv_site_packages={{ project.virtualenv_site_packages }}
    virtualenv={{ project.virtualenv }}
    extra_args=''
  with_items: project.requirements
  tags:
    - packages
    - requirements
    - application
    - pip
    - app
  retries: 3

- name: Django | Settings | Create Django Database Settings Module
  sudo_user: "{{ project.user }}"
  template: >
    src=ansible_settings.py.j2
    dest="{{ django.main }}/ansible_settings.py"
  notify:
    - restart celery workers
    - restart uwsgi
  tags:
    - code
    - settings
    - cache
    - database
    - config
    - update
    - app

- name: Django | Run initialization commands
  sudo_user: "{{ project.user }}"
  django_manage: >
    command={{ item }}
    app_path={{ django.root }}
    settings={{ django.settings }}
    virtualenv={{ project.virtualenv }}
  with_items: django.initialization
  tags:
    - database
    - app

#- name: Django | Create Database Tables
  #when: syncdb is defined
  #sudo_user: "{{ project.user }}"
  #django_manage: >
    #command=syncdb
    #app_path={{ django.root }}
    #settings={{ django.settings }}
    #virtualenv={{ project.virtualenv }}
  #tags:
    #- database
    #- app

#- name: Django | Migrate Django database.
  #when: migrations is defined
  #sudo_user: "{{ project.user }}"
  #django_manage: >
    #command=migrate
    #app_path={{ django.root }}
    #settings={{ django.settings }}
    #virtualenv={{ project.virtualenv }}
  #tags:
    #- database
    #- update
    #- app

#- name: Django | Install Fixtures.
  #when: fixtures is defined
  #sudo_user: "{{ project.user }}"
  #django_manage: >
    #command=loaddata
    #fixtures={{ item }}
    #app_path={{ django.root }}
    #settings={{ django.settings }}
    #virtualenv={{ project.virtualenv }}
  #with_items: django.fixtures
  #tags:
    #- database
    #- fixtures
    #- app

#- name: Django | Install sites fixture
  #sudo_user: "{{ project.user }}"
  #template: >
    #src=sites.json.j2
    #dest="{{ project.root }}/fixtures/sites.json"
  #tags:
    #- database
    #- fixtures
    #- app

#- name: Django | Update sites table
  #when: fixtures is defined
  #sudo_user: "{{ project.user }}"
  #django_manage: >
    #command=loaddata
    #fixtures=sites.json
    #app_path={{ project.root }}
    #settings={{ django.settings }}
    #virtualenv={{ project.virtualenv }}
  #tags:
    #- database
    #- fixtures
    #- app

- name: Django | Assets | Collect
  sudo_user: "{{ project.user }}"
  django_manage: >
    command=collectstatic
    app_path={{ django.root }}
    settings={{ django.settings }}
    virtualenv={{ project.virtualenv }}
  tags:
    - code
    - assets
    - collectstatic
    - app

- name: Django | Cron triggers
  when: cron is defined
  with_items: cron_commands
  cron: >
    name="{{ item.command }}"
    job="sudo -u {{ project.user }} {{ project.virtualenv }}/bin/python {{ django.root }}/manage.py {{ item.command }} --settings={{ django.settings }}"
    day="{{ item.day }}"
    hour="{{ item.hour }}"
    minute="{{ item.minute }}"
    state=present
  tags:
    - cron
    - app
